{
  "code_architecture": {
    "total_files": 68,
    "total_lines": "3500+",
    "modules": {
      "main.py": {
        "description": "Application entry point with logging and error handling",
        "functions": [
          {
            "name": "main",
            "signature": "def main() -> None",
            "description": "Application entry point, initializes logging and starts GUI"
          }
        ]
      },
      "config/settings.py": {
        "description": "Application settings management with JSON persistence",
        "classes": [
          {
            "name": "Settings",
            "description": "Application settings manager with persistence",
            "methods": [
              {
                "name": "__init__",
                "signature": "def __init__(self) -> None",
                "description": "Initialize settings manager with default configuration"
              },
              {
                "name": "_create_directories",
                "signature": "def _create_directories(self) -> None",
                "description": "Create application directories if they don't exist"
              },
              {
                "name": "load_settings",
                "signature": "def load_settings(self) -> Dict[str, Any]",
                "description": "Load settings from config file or create defaults"
              },
              {
                "name": "save_settings",
                "signature": "def save_settings(self) -> bool",
                "description": "Save current settings to config file"
              },
              {
                "name": "get",
                "signature": "def get(self, key: str, default: Any = None) -> Any",
                "description": "Get setting value with optional default"
              },
              {
                "name": "set",
                "signature": "def set(self, key: str, value: Any) -> None",
                "description": "Set setting value and save to file"
              },
              {
                "name": "get_database_path",
                "signature": "def get_database_path(self) -> Path",
                "description": "Get path to application database file"
              },
              {
                "name": "reset_to_defaults",
                "signature": "def reset_to_defaults(self) -> None",
                "description": "Reset all settings to default values"
              }
            ]
          }
        ]
      },
      "config/themes_tk.py": {
        "description": "Theme management system for Tkinter interface",
        "classes": [
          {
            "name": "Themes",
            "description": "Theme manager with color schemes and styling",
            "methods": [
              {
                "name": "__init__",
                "signature": "def __init__(self) -> None",
                "description": "Initialize theme system with default dark theme"
              },
              {
                "name": "get_color",
                "signature": "def get_color(self, color_name: str, theme: str = None) -> str",
                "description": "Get color value from current or specified theme"
              },
              {
                "name": "get_garden_color",
                "signature": "def get_garden_color(self, garden_index: int) -> str",
                "description": "Get color for garden identification by index"
              },
              {
                "name": "get_priority_color",
                "signature": "def get_priority_color(self, priority: str) -> str",
                "description": "Get color for task priority visualization"
              },
              {
                "name": "get_stage_color",
                "signature": "def get_stage_color(self, stage: str) -> str",
                "description": "Get color for growth stage visualization"
              },
              {
                "name": "set_theme",
                "signature": "def set_theme(self, theme_name: str) -> None",
                "description": "Switch to specified theme"
              },
              {
                "name": "get_font_family",
                "signature": "def get_font_family(self) -> str",
                "description": "Get current theme font family"
              },
              {
                "name": "get_fonts",
                "signature": "def get_fonts(self) -> Dict[str, Tuple[str, int]]",
                "description": "Get all font definitions for current theme"
              },
              {
                "name": "get_button_styles",
                "signature": "def get_button_styles(self) -> Dict[str, Dict]",
                "description": "Get button styling configuration"
              },
              {
                "name": "get_frame_styles",
                "signature": "def get_frame_styles(self) -> Dict[str, Dict]",
                "description": "Get frame styling configuration"
              }
            ]
          }
        ]
      },
      "core/models/__init__.py": {
        "description": "Core data models and base classes",
        "enums": [
          {
            "name": "GrowingMethod",
            "values": ["SOIL_INDOOR", "SOIL_OUTDOOR", "HYDRO_DWC", "HYDRO_NFT", "HYDRO_EBB_FLOW", "HYDRO_AERO", "GREENHOUSE", "MIXED_LIGHT"]
          },
          {
            "name": "GrowthStage",
            "values": ["GERMINATION", "SEEDLING", "VEGETATIVE", "FLOWERING", "HARVEST", "CURING"]
          },
          {
            "name": "TaskPriority",
            "values": ["CRITICAL", "HIGH", "MEDIUM", "LOW"]
          },
          {
            "name": "TaskStatus",
            "values": ["PENDING", "IN_PROGRESS", "COMPLETED", "OVERDUE", "CANCELLED"]
          }
        ],
        "classes": [
          {
            "name": "BaseModel",
            "description": "Base model class with common functionality",
            "methods": [
              {
                "name": "__init__",
                "signature": "def __init__(self) -> None",
                "description": "Initialize base model with UUID and timestamps"
              },
              {
                "name": "update_timestamp",
                "signature": "def update_timestamp(self) -> None",
                "description": "Update the last modified timestamp"
              },
              {
                "name": "to_dict",
                "signature": "def to_dict(self) -> Dict[str, Any]",
                "description": "Convert model to dictionary representation"
              },
              {
                "name": "from_dict",
                "signature": "def from_dict(self, data: Dict[str, Any]) -> None",
                "description": "Load model from dictionary representation"
              },
              {
                "name": "save_to_json",
                "signature": "def save_to_json(self, filepath: str) -> None",
                "description": "Save model to JSON file"
              },
              {
                "name": "load_from_json",
                "signature": "@classmethod def load_from_json(cls, filepath: str) -> 'BaseModel'",
                "description": "Load model from JSON file"
              }
            ]
          }
        ]
      },
      "core/models/garden.py": {
        "description": "Garden model with environmental settings and performance tracking",
        "classes": [
          {
            "name": "Garden",
            "description": "Garden model with environmental controls and performance metrics",
            "inherits": "BaseModel",
            "methods": [
              {
                "name": "__init__",
                "signature": "def __init__(self, name: str, growing_method: GrowingMethod, width: float, depth: float, height: float) -> None",
                "description": "Initialize garden with basic dimensions and growing method"
              },
              {
                "name": "calculate_growing_area",
                "signature": "def calculate_growing_area(self) -> float",
                "description": "Calculate total growing area in square feet"
              },
              {
                "name": "calculate_volume",
                "signature": "def calculate_volume(self) -> float",
                "description": "Calculate total volume in cubic feet"
              },
              {
                "name": "calculate_light_density",
                "signature": "def calculate_light_density(self) -> float",
                "description": "Calculate light density in watts per square foot"
              },
              {
                "name": "update_performance_metrics",
                "signature": "def update_performance_metrics(self, harvest_data: Dict) -> None",
                "description": "Update performance metrics with harvest data"
              },
              {
                "name": "get_recommended_plant_count",
                "signature": "def get_recommended_plant_count(self) -> int",
                "description": "Calculate recommended plant count based on space and method"
              },
              {
                "name": "estimate_power_consumption",
                "signature": "def estimate_power_consumption(self) -> Dict[str, float]",
                "description": "Estimate power consumption for all equipment"
              },
              {
                "name": "clone",
                "signature": "def clone(self, new_name: str) -> 'Garden'",
                "description": "Create a copy of this garden with a new name"
              }
            ]
          }
        ]
      },
      "core/models/task.py": {
        "description": "Task model with dependencies, recurring patterns, and priorities",
        "classes": [
          {
            "name": "Task",
            "description": "Task model with scheduling, dependencies, and resource requirements",
            "inherits": "BaseModel",
            "methods": [
              {
                "name": "__init__",
                "signature": "def __init__(self, title: str, description: str = '', due_date: Optional[date] = None, priority: TaskPriority = TaskPriority.MEDIUM, garden_id: Optional[str] = None) -> None",
                "description": "Initialize task with basic properties"
              },
              {
                "name": "is_overdue",
                "signature": "def is_overdue(self) -> bool",
                "description": "Check if task is past due date"
              },
              {
                "name": "days_until_due",
                "signature": "def days_until_due(self) -> int",
                "description": "Calculate days until task is due"
              },
              {
                "name": "can_start",
                "signature": "def can_start(self, completed_task_ids: List[str]) -> bool",
                "description": "Check if task dependencies are satisfied"
              },
              {
                "name": "mark_completed",
                "signature": "def mark_completed(self, notes: str = '', actual_duration: Optional[int] = None) -> None",
                "description": "Mark task as completed with optional notes and duration"
              },
              {
                "name": "mark_in_progress",
                "signature": "def mark_in_progress(self, progress_percent: int = 0) -> None",
                "description": "Mark task as in progress with optional progress percentage"
              },
              {
                "name": "cancel_task",
                "signature": "def cancel_task(self, reason: str = '') -> None",
                "description": "Cancel task with optional reason"
              },
              {
                "name": "reschedule",
                "signature": "def reschedule(self, new_date: date, reason: str = '') -> None",
                "description": "Reschedule task to new date with optional reason"
              },
              {
                "name": "add_dependency",
                "signature": "def add_dependency(self, task_id: str) -> None",
                "description": "Add task dependency"
              },
              {
                "name": "remove_dependency",
                "signature": "def remove_dependency(self, task_id: str) -> None",
                "description": "Remove task dependency"
              },
              {
                "name": "add_required_resource",
                "signature": "def add_required_resource(self, resource_id: str, quantity: float = 1.0) -> None",
                "description": "Add required resource with quantity"
              },
              {
                "name": "estimate_cost",
                "signature": "def estimate_cost(self, resource_costs: Dict[str, float]) -> float",
                "description": "Estimate task cost based on required resources"
              },
              {
                "name": "create_next_occurrence",
                "signature": "def create_next_occurrence(self) -> Optional['Task']",
                "description": "Create next occurrence for recurring tasks"
              },
              {
                "name": "get_color_by_priority",
                "signature": "def get_color_by_priority(self) -> str",
                "description": "Get color code based on task priority"
              },
              {
                "name": "get_color_by_status",
                "signature": "def get_color_by_status(self) -> str",
                "description": "Get color code based on task status"
              }
            ]
          }
        ]
      },
      "core/database/database_manager.py": {
        "description": "SQLite database manager with comprehensive CRUD operations",
        "classes": [
          {
            "name": "DatabaseManager",
            "description": "Comprehensive database manager for all application data",
            "methods": [
              {
                "name": "__init__",
                "signature": "def __init__(self, db_path: str = None) -> None",
                "description": "Initialize database manager with optional custom path"
              },
              {
                "name": "get_connection",
                "signature": "def get_connection(self) -> sqlite3.Connection",
                "description": "Get database connection with optimizations"
              },
              {
                "name": "initialize_database",
                "signature": "def initialize_database(self) -> None",
                "description": "Create all database tables and indexes"
              },
              {
                "name": "create_indexes",
                "signature": "def create_indexes(self, conn: sqlite3.Connection) -> None",
                "description": "Create database indexes for performance"
              },
              {
                "name": "initialize_default_settings",
                "signature": "def initialize_default_settings(self, conn: sqlite3.Connection) -> None",
                "description": "Initialize default application settings"
              },
              {
                "name": "create_garden",
                "signature": "def create_garden(self, garden_data: Dict) -> int",
                "description": "Create new garden record and return ID"
              },
              {
                "name": "get_all_gardens",
                "signature": "def get_all_gardens(self) -> List[Dict]",
                "description": "Get all gardens with summary information"
              },
              {
                "name": "get_garden_details",
                "signature": "def get_garden_details(self, garden_id: int) -> Optional[Dict]",
                "description": "Get detailed garden information including plants and tasks"
              },
              {
                "name": "add_plant",
                "signature": "def add_plant(self, plant_data: Dict) -> int",
                "description": "Add plant to garden and return plant ID"
              },
              {
                "name": "create_task",
                "signature": "def create_task(self, task_data: Dict) -> int",
                "description": "Create new task and return task ID"
              },
              {
                "name": "get_tasks_for_date_range",
                "signature": "def get_tasks_for_date_range(self, start_date: str, end_date: str, garden_id: Optional[int] = None) -> List[Dict]",
                "description": "Get tasks within specified date range"
              },
              {
                "name": "complete_task",
                "signature": "def complete_task(self, task_id: int, completion_notes: str = '') -> bool",
                "description": "Mark task as completed with optional notes"
              },
              {
                "name": "create_backup",
                "signature": "def create_backup(self) -> str",
                "description": "Create database backup and return backup filename"
              },
              {
                "name": "get_database_stats",
                "signature": "def get_database_stats(self) -> Dict",
                "description": "Get database statistics and health information"
              }
            ]
          }
        ]
      },
      "core/calculators/nutrient_calculator.py": {
        "description": "Advanced nutrient mixing and feeding calculations",
        "classes": [
          {
            "name": "NutrientCalculator",
            "description": "Advanced nutrient mixing and EC calculations",
            "methods": [
              {
                "name": "__init__",
                "signature": "def __init__(self) -> None",
                "description": "Initialize calculator with nutrient database"
              },
              {
                "name": "load_nutrient_data",
                "signature": "def load_nutrient_data(self) -> None",
                "description": "Load nutrient profiles and recipe database"
              },
              {
                "name": "calculate_recipe",
                "signature": "def calculate_recipe(self, recipe_name: str, volume_gallons: float, growth_stage: str = 'vegetative') -> Dict",
                "description": "Calculate nutrient amounts for given recipe and volume"
              },
              {
                "name": "adjust_recipe_for_ec",
                "signature": "def adjust_recipe_for_ec(self, recipe_name: str, target_ec: float, volume_gallons: float) -> Dict",
                "description": "Adjust recipe to achieve target EC level"
              },
              {
                "name": "calculate_reservoir_change",
                "signature": "def calculate_reservoir_change(self, current_volume: float, current_ec: float, target_ec: float, target_volume: float) -> Dict",
                "description": "Calculate how to adjust existing reservoir"
              },
              {
                "name": "calculate_deficiency_correction",
                "signature": "def calculate_deficiency_correction(self, deficiency_type: str, severity: str, volume_gallons: float) -> Dict",
                "description": "Calculate correction for nutrient deficiencies"
              },
              {
                "name": "get_feeding_schedule_ec",
                "signature": "def get_feeding_schedule_ec(self, growth_stage: str, week_number: int) -> float",
                "description": "Get recommended EC for growth stage and week"
              }
            ]
          }
        ]
      },
      "core/calculators/lighting_calculator.py": {
        "description": "PPFD, DLI, and lighting setup calculations",
        "classes": [
          {
            "name": "LightingCalculator",
            "description": "Advanced lighting calculations for optimal plant growth",
            "methods": [
              {
                "name": "__init__",
                "signature": "def __init__(self) -> None",
                "description": "Initialize calculator with lighting fixture database"
              },
              {
                "name": "load_lighting_data",
                "signature": "def load_lighting_data(self) -> None",
                "description": "Load lighting fixture specifications and PPFD maps"
              },
              {
                "name": "calculate_ppfd_coverage",
                "signature": "def calculate_ppfd_coverage(self, fixture_name: str, hanging_height: int, tent_dimensions: Dict) -> Dict",
                "description": "Calculate PPFD distribution for fixture setup"
              },
              {
                "name": "calculate_dli",
                "signature": "def calculate_dli(self, ppfd: float, photoperiod_hours: float) -> Dict",
                "description": "Calculate Daily Light Integral from PPFD and photoperiod"
              },
              {
                "name": "recommend_lighting_setup",
                "signature": "def recommend_lighting_setup(self, grow_space_sq_ft: float, growth_stage: str, budget: float = None) -> Dict",
                "description": "Recommend optimal lighting setup for space and stage"
              },
              {
                "name": "calculate_energy_costs",
                "signature": "def calculate_energy_costs(self, fixture_name: str, fixtures_count: int, photoperiod_hours: float, electricity_rate: float) -> Dict",
                "description": "Calculate daily and monthly energy costs"
              },
              {
                "name": "calculate_hanging_height",
                "signature": "def calculate_hanging_height(self, fixture_name: str, target_ppfd: float, tent_dimensions: Dict) -> Dict",
                "description": "Calculate optimal hanging height for target PPFD"
              },
              {
                "name": "compare_fixtures",
                "signature": "def compare_fixtures(self, grow_space_sq_ft: float, growth_stage: str) -> Dict",
                "description": "Compare different lighting fixtures for given space"
              }
            ]
          }
        ]
      },
      "core/calculators/cost_calculator.py": {
        "description": "Setup and operating cost analysis with ROI calculations",
        "classes": [
          {
            "name": "CostCalculator",
            "description": "Comprehensive cost analysis and ROI calculations",
            "methods": [
              {
                "name": "__init__",
                "signature": "def __init__(self) -> None",
                "description": "Initialize calculator with equipment and supply pricing"
              },
              {
                "name": "load_cost_data",
                "signature": "def load_cost_data(self) -> None",
                "description": "Load equipment pricing and operating costs database"
              },
              {
                "name": "calculate_setup_costs",
                "signature": "def calculate_setup_costs(self, tent_size: str, lighting_wattage: str, equipment_level: str = 'intermediate') -> Dict",
                "description": "Calculate initial setup costs for grow operation"
              },
              {
                "name": "calculate_operating_costs",
                "signature": "def calculate_operating_costs(self, lighting_schedule: str, plant_count: int, electricity_rate: float = 0.12) -> Dict",
                "description": "Calculate monthly operating costs"
              },
              {
                "name": "calculate_roi_analysis",
                "signature": "def calculate_roi_analysis(self, setup_costs: Dict, operating_costs: Dict, expected_yield_per_plant: float, market_price_per_oz: float) -> Dict",
                "description": "Calculate return on investment analysis"
              },
              {
                "name": "compare_setup_options",
                "signature": "def compare_setup_options(self, tent_sizes: List[str], experience_level: str = 'intermediate') -> Dict",
                "description": "Compare costs and ROI for different setup options"
              },
              {
                "name": "calculate_scaling_analysis",
                "signature": "def calculate_scaling_analysis(self, base_tent_size: str, scaling_factor: int) -> Dict",
                "description": "Analyze costs and benefits of scaling operation"
              }
            ]
          }
        ]
      },
      "core/calculators/environmental_calculator.py": {
        "description": "VPD, humidity, temperature, and airflow calculations",
        "classes": [
          {
            "name": "EnvironmentalCalculator",
            "description": "Environmental control calculations for optimal growing conditions",
            "methods": [
              {
                "name": "__init__",
                "signature": "def __init__(self) -> None",
                "description": "Initialize calculator with environmental data tables"
              },
              {
                "name": "load_environmental_data",
                "signature": "def load_environmental_data(self) -> None",
                "description": "Load optimal ranges and equipment specifications"
              },
              {
                "name": "calculate_vpd",
                "signature": "def calculate_vpd(self, temperature_f: float, relative_humidity: float) -> Dict",
                "description": "Calculate Vapor Pressure Deficit and provide recommendations"
              },
              {
                "name": "_rate_vpd",
                "signature": "def _rate_vpd(self, vpd: float) -> str",
                "description": "Rate VPD level (optimal, acceptable, poor)"
              },
              {
                "name": "find_optimal_humidity",
                "signature": "def find_optimal_humidity(self, temperature_f: float, growth_stage: str) -> Dict",
                "description": "Find optimal humidity for given temperature and growth stage"
              },
              {
                "name": "_get_climate_recommendations",
                "signature": "def _get_climate_recommendations(self, temp_f: float, humidity: float, stage: str) -> List[str]",
                "description": "Get specific climate adjustment recommendations"
              },
              {
                "name": "calculate_air_exchange",
                "signature": "def calculate_air_exchange(self, tent_width_ft: float, tent_depth_ft: float, tent_height_ft: float, lighting_wattage: int) -> Dict",
                "description": "Calculate required air exchange rates and fan sizing"
              },
              {
                "name": "calculate_dehumidification_needs",
                "signature": "def calculate_dehumidification_needs(self, tent_volume_cubic_ft: float, plant_count: int, current_humidity: float, target_humidity: float) -> Dict",
                "description": "Calculate dehumidification requirements"
              },
              {
                "name": "calculate_co2_supplementation",
                "signature": "def calculate_co2_supplementation(self, tent_volume_cubic_ft: float, target_ppm: int = 1200, air_exchanges_per_hour: float = 4.0) -> Dict",
                "description": "Calculate CO2 supplementation requirements"
              },
              {
                "name": "_get_co2_recommendations",
                "signature": "def _get_co2_recommendations(self, target_ppm: int, air_exchanges: float) -> List[str]",
                "description": "Get CO2 system recommendations"
              },
              {
                "name": "environmental_troubleshooting",
                "signature": "def environmental_troubleshooting(self, temperature_f: float, humidity: float, symptoms: List[str]) -> Dict",
                "description": "Diagnose environmental issues and provide solutions"
              }
            ]
          }
        ]
      },
      "gui/main_window_tk.py": {
        "description": "Main Tkinter application window with tabbed interface",
        "classes": [
          {
            "name": "MainWindow",
            "description": "Main application window with complete GUI interface",
            "methods": [
              {
                "name": "__init__",
                "signature": "def __init__(self) -> None",
                "description": "Initialize main window with themes and components"
              },
              {
                "name": "setup_window",
                "signature": "def setup_window(self) -> None",
                "description": "Configure main window properties and geometry"
              },
              {
                "name": "center_window",
                "signature": "def center_window(self) -> None",
                "description": "Center window on screen"
              },
              {
                "name": "setup_styles",
                "signature": "def setup_styles(self) -> None",
                "description": "Configure ttk styles for themed widgets"
              },
              {
                "name": "create_menu_bar",
                "signature": "def create_menu_bar(self) -> None",
                "description": "Create application menu bar with all menus"
              },
              {
                "name": "create_main_interface",
                "signature": "def create_main_interface(self) -> None",
                "description": "Create main interface layout with tabs and status bar"
              },
              {
                "name": "create_status_bar",
                "signature": "def create_status_bar(self, parent) -> None",
                "description": "Create status bar with system information"
              },
              {
                "name": "create_tabs",
                "signature": "def create_tabs(self) -> None",
                "description": "Create all application tabs and their content"
              },
              {
                "name": "create_dashboard_content",
                "signature": "def create_dashboard_content(self, parent) -> None",
                "description": "Create dashboard tab with overview widgets"
              },
              {
                "name": "create_stat_card",
                "signature": "def create_stat_card(self, parent, title, value, side) -> None",
                "description": "Create statistical display card widget"
              },
              {
                "name": "create_calendar_content",
                "signature": "def create_calendar_content(self, parent) -> None",
                "description": "Create calendar tab with task scheduling"
              },
              {
                "name": "create_tasks_content",
                "signature": "def create_tasks_content(self, parent) -> None",
                "description": "Create task management tab interface"
              },
              {
                "name": "create_gardens_content",
                "signature": "def create_gardens_content(self, parent) -> None",
                "description": "Create garden management tab interface"
              },
              {
                "name": "create_inventory_content",
                "signature": "def create_inventory_content(self, parent) -> None",
                "description": "Create inventory management tab interface"
              },
              {
                "name": "create_calculator_content",
                "signature": "def create_calculator_content(self, parent) -> None",
                "description": "Create calculator tools tab interface"
              },
              {
                "name": "create_settings_content",
                "signature": "def create_settings_content(self, parent) -> None",
                "description": "Create settings and preferences tab"
              },
              {
                "name": "new_garden",
                "signature": "def new_garden(self) -> None",
                "description": "Launch new garden creation wizard"
              },
              {
                "name": "import_data",
                "signature": "def import_data(self) -> None",
                "description": "Import data from external sources"
              },
              {
                "name": "export_data",
                "signature": "def export_data(self) -> None",
                "description": "Export application data"
              },
              {
                "name": "manage_gardens",
                "signature": "def manage_gardens(self) -> None",
                "description": "Open garden management interface"
              }
            ]
          }
        ]
      },
      "gui/components/dashboard_tab.py": {
        "description": "Dashboard with statistics, recent tasks, and quick actions",
        "classes": [
          {
            "name": "DashboardTab",
            "description": "Main dashboard with overview and quick access",
            "methods": [
              {
                "name": "__init__",
                "signature": "def __init__(self, parent, settings) -> None",
                "description": "Initialize dashboard tab with parent and settings"
              },
              {
                "name": "create_header",
                "signature": "def create_header(self) -> None",
                "description": "Create dashboard header with greeting and stats"
              },
              {
                "name": "create_stat_card",
                "signature": "def create_stat_card(self, parent, title: str, value: str, icon: str, column: int) -> None",
                "description": "Create statistical display card"
              },
              {
                "name": "create_main_content",
                "signature": "def create_main_content(self) -> None",
                "description": "Create main dashboard content area"
              },
              {
                "name": "create_tasks_list",
                "signature": "def create_tasks_list(self, parent) -> None",
                "description": "Create upcoming tasks display"
              },
              {
                "name": "create_task_item",
                "signature": "def create_task_item(self, parent, task: Dict, row: int) -> None",
                "description": "Create individual task display item"
              },
              {
                "name": "create_gardens_list",
                "signature": "def create_gardens_list(self, parent) -> None",
                "description": "Create active gardens display"
              },
              {
                "name": "create_garden_item",
                "signature": "def create_garden_item(self, parent, garden: Dict, row: int) -> None",
                "description": "Create individual garden display item"
              },
              {
                "name": "create_quick_actions",
                "signature": "def create_quick_actions(self) -> None",
                "description": "Create quick action buttons panel"
              },
              {
                "name": "refresh_dashboard",
                "signature": "def refresh_dashboard(self) -> None",
                "description": "Refresh all dashboard data and displays"
              },
              {
                "name": "update_statistics",
                "signature": "def update_statistics(self) -> None",
                "description": "Update statistical displays with current data"
              },
              {
                "name": "schedule_refresh",
                "signature": "def schedule_refresh(self) -> None",
                "description": "Schedule automatic dashboard refresh"
              },
              {
                "name": "get_time_greeting",
                "signature": "def get_time_greeting(self) -> str",
                "description": "Get time-appropriate greeting message"
              },
              {
                "name": "complete_task",
                "signature": "def complete_task(self, task: Dict) -> None",
                "description": "Mark task as completed from dashboard"
              },
              {
                "name": "view_garden",
                "signature": "def view_garden(self, garden: Dict) -> None",
                "description": "Open detailed garden view"
              },
              {
                "name": "new_garden",
                "signature": "def new_garden(self) -> None",
                "description": "Launch new garden creation wizard"
              },
              {
                "name": "add_task",
                "signature": "def add_task(self) -> None",
                "description": "Open task creation dialog"
              },
              {
                "name": "log_expense",
                "signature": "def log_expense(self) -> None",
                "description": "Open expense logging dialog"
              },
              {
                "name": "view_reports",
                "signature": "def view_reports(self) -> None",
                "description": "Open reports and analytics view"
              }
            ]
          }
        ]
      },
      "gui/components/master_calendar_tab.py": {
        "description": "Calendar interface with task scheduling and garden timeline",
        "classes": [
          {
            "name": "MasterCalendarTab",
            "description": "Calendar interface for task and grow schedule management",
            "methods": [
              {
                "name": "__init__",
                "signature": "def __init__(self, parent, settings) -> None",
                "description": "Initialize calendar tab"
              },
              {
                "name": "create_interface",
                "signature": "def create_interface(self) -> None",
                "description": "Create calendar interface layout"
              },
              {
                "name": "create_calendar_grid",
                "signature": "def create_calendar_grid(self) -> None",
                "description": "Create calendar grid with task overlays"
              },
              {
                "name": "load_calendar_data",
                "signature": "def load_calendar_data(self) -> None",
                "description": "Load tasks and events for calendar display"
              },
              {
                "name": "prev_month",
                "signature": "def prev_month(self) -> None",
                "description": "Navigate to previous month"
              },
              {
                "name": "next_month",
                "signature": "def next_month(self) -> None",
                "description": "Navigate to next month"
              },
              {
                "name": "update_calendar",
                "signature": "def update_calendar(self) -> None",
                "description": "Update calendar display with current month data"
              },
              {
                "name": "set_view_mode",
                "signature": "def set_view_mode(self, mode: str) -> None",
                "description": "Set calendar view mode (month, week, day)"
              }
            ]
          }
        ]
      },
      "data/knowledge_base/growing_guides.py": {
        "description": "Comprehensive growing knowledge database with 465+ lines",
        "classes": [
          {
            "name": "GrowingKnowledge",
            "description": "Comprehensive growing knowledge and guidance database",
            "methods": [
              {
                "name": "__init__",
                "signature": "def __init__(self) -> None",
                "description": "Initialize knowledge base with all growing data"
              },
              {
                "name": "load_knowledge_base",
                "signature": "def load_knowledge_base(self) -> None",
                "description": "Load complete knowledge database with environmental data, tasks, and recipes"
              },
              {
                "name": "get_environmental_requirements",
                "signature": "def get_environmental_requirements(self, plant_type: str, growth_stage: str) -> Dict",
                "description": "Get environmental requirements for plant type and growth stage"
              },
              {
                "name": "get_growth_stage_tasks",
                "signature": "def get_growth_stage_tasks(self, plant_type: str, growth_stage: str) -> List[Dict]",
                "description": "Get recommended tasks for specific growth stage"
              },
              {
                "name": "get_nutrient_recipe",
                "signature": "def get_nutrient_recipe(self, recipe_name: str, growth_stage: str) -> Dict",
                "description": "Get nutrient recipe for specific growth stage"
              },
              {
                "name": "get_pest_treatment_plan",
                "signature": "def get_pest_treatment_plan(self, pest_name: str) -> Dict",
                "description": "Get treatment plan for specific pest"
              },
              {
                "name": "generate_feeding_schedule",
                "signature": "def generate_feeding_schedule(self, plant_count: int, growth_stage: str, nutrient_system: str = 'hydro') -> Dict",
                "description": "Generate feeding schedule for plants"
              }
            ]
          }
        ]
      },
      "data/knowledge_base/products.py": {
        "description": "Product database with equipment specs and pricing (350+ lines)",
        "classes": [
          {
            "name": "ProductDatabase",
            "description": "Comprehensive equipment and supply database with pricing",
            "methods": [
              {
                "name": "__init__",
                "signature": "def __init__(self) -> None",
                "description": "Initialize product database with all equipment categories"
              },
              {
                "name": "load_product_database",
                "signature": "def load_product_database(self) -> None",
                "description": "Load complete product database with specifications and pricing"
              },
              {
                "name": "get_product_info",
                "signature": "def get_product_info(self, category: str, product_id: str) -> Optional[Dict]",
                "description": "Get detailed product information and specifications"
              },
              {
                "name": "calculate_setup_cost",
                "signature": "def calculate_setup_cost(self, package_name: str) -> Dict",
                "description": "Calculate total setup cost for equipment package"
              },
              {
                "name": "get_monthly_operating_costs",
                "signature": "def get_monthly_operating_costs(self, setup_type: str = 'intermediate_2x4_complete') -> Dict",
                "description": "Get estimated monthly operating costs for setup type"
              }
            ]
          }
        ]
      },
      "gui_test.py": {
        "description": "Comprehensive GUI testing suite (440+ lines)",
        "classes": [
          {
            "name": "GUITest",
            "description": "Comprehensive test suite for GUI components",
            "methods": [
              {
                "name": "__init__",
                "signature": "def __init__(self) -> None",
                "description": "Initialize test suite with sample data"
              },
              {
                "name": "setup_test_data",
                "signature": "def setup_test_data(self) -> None",
                "description": "Set up sample data for testing GUI components"
              },
              {
                "name": "test_basic_window",
                "signature": "def test_basic_window(self) -> None",
                "description": "Test basic window creation and styling"
              },
              {
                "name": "test_tabbed_interface",
                "signature": "def test_tabbed_interface(self) -> None",
                "description": "Test complete tabbed interface with all tabs"
              },
              {
                "name": "create_test_dashboard",
                "signature": "def create_test_dashboard(self, parent) -> None",
                "description": "Create test dashboard with sample statistics"
              },
              {
                "name": "create_test_tasks",
                "signature": "def create_test_tasks(self, parent) -> None",
                "description": "Create test task interface with sample tasks"
              },
              {
                "name": "create_test_gardens",
                "signature": "def create_test_gardens(self, parent) -> None",
                "description": "Create test garden interface with sample gardens"
              },
              {
                "name": "create_test_inventory",
                "signature": "def create_test_inventory(self, parent) -> None",
                "description": "Create test inventory interface with sample items"
              },
              {
                "name": "test_dialogs_and_forms",
                "signature": "def test_dialogs_and_forms(self) -> None",
                "description": "Test dialog boxes and forms"
              },
              {
                "name": "test_main_application",
                "signature": "def test_main_application(self) -> None",
                "description": "Test main application window"
              },
              {
                "name": "run_all_tests",
                "signature": "def run_all_tests(self) -> None",
                "description": "Run complete test suite"
              }
            ]
          }
        ],
        "functions": [
          {
            "name": "main",
            "signature": "def main() -> None",
            "description": "Main test function with error handling"
          },
          {
            "name": "test_gui",
            "signature": "def test_gui() -> None",
            "description": "Run GUI tests with proper setup"
          }
        ]
      }
    },
    "summary": {
      "total_classes": 18,
      "total_methods": 150,
      "total_functions": 4,
      "key_patterns": [
        "MVC Architecture with clear separation of concerns",
        "Comprehensive calculator system for all growing calculations",
        "Rich knowledge base with 800+ lines of growing expertise",
        "Professional GUI with tabbed interface and themes",
        "Complete database layer with SQLite backend",
        "Modular design with reusable components",
        "Extensive testing infrastructure",
        "Type hints and documentation throughout"
      ]
    }
  },
  "program_info": {
    "name": "GrowMaster Pro",
    "version": "1.0.0",
    "description": "Professional Multi-Garden Management System",
    "target_platform": "Windows/Linux Python 3.9+",
    "gui_framework": "Standard Tkinter + ttk (Changed from CustomTkinter)",
    "database": "SQLite",
    "created_date": "2025-08-24",
    "status": "Stage 4 Complete - Early Development",
    "actual_completion": "25% Complete",
    "lines_of_code": "3500+"
  },

  "development_stages": {
    "stage_1": {
      "name": "Project Foundation & Architecture",
      "description": "Basic project structure, configuration, and architectural planning",
      "requirements": [
        "Project directory structure",
        "Configuration management system", 
        "Logging infrastructure",
        "Theme system foundation",
        "Requirements management"
      ],
      "completion_status": "100% Complete",
      "deliverables_completed": [
        "Complete project structure with proper directories",
        "Settings management with JSON persistence", 
        "Professional logging system",
        "Theme system (converted to standard Tkinter)",
        "Requirements.txt with standard libraries only"
      ]
    },

    "stage_2": {
      "name": "Core Data Models & Knowledge Base",
      "description": "Fundamental data structures and comprehensive growing knowledge",
      "requirements": [
        "Garden data model with environmental tracking",
        "Task data model with dependencies and scheduling",
        "Plant data model with growth stage tracking",
        "Growing guides knowledge base",
        "Product database with pricing and specifications"
      ],
      "completion_status": "100% Complete", 
      "deliverables_completed": [
        "Complete Garden model (150+ lines) with environmental settings",
        "Comprehensive Task model (100+ lines) with priorities and dependencies",
        "Growing knowledge database (465+ lines) with stages, nutrients, IPM",
        "Product database (350+ lines) with equipment, supplies, and costs",
        "Base model classes with professional enums"
      ]
    },

    "stage_3": {
      "name": "Basic GUI Framework",
      "description": "Foundation GUI system with core interface elements",
      "requirements": [
        "Main application window with menu system",
        "Tabbed interface for different sections",
        "Basic dashboard with statistics cards", 
        "Task list display with priorities",
        "Garden overview with status indicators",
        "Settings panel for configuration"
      ],
      "completion_status": "100% Complete",
      "deliverables_completed": [
        "Professional main window (300+ lines) with full tabbed interface",
        "Dashboard tab with real-time statistics and activity feed",
        "Task manager tab with priority-based display",
        "Garden management with card-based layout",
        "Settings panel with theme and preference options",
        "Professional menu bar and status indicators"
      ]
    },

    "stage_4": {
      "name": "Testing Infrastructure & Documentation",
      "description": "Comprehensive testing framework and project documentation",
      "requirements": [
        "GUI test suite for all interface components",
        "Automated testing with sample data",
        "Development status documentation",
        "Code quality metrics and reporting",
        "Deployment preparation documentation"
      ],
      "completion_status": "100% Complete",
      "deliverables_completed": [
        "Comprehensive GUI test suite (440+ lines)",
        "Automated test runner with detailed reporting", 
        "Complete project status documentation",
        "Sample data generation for realistic testing",
        "Headless environment compatibility"
      ]
    },

    "stage_5": {
      "name": "Database Integration & Data Persistence", 
      "description": "Complete data storage and retrieval system",
      "requirements": [
        "SQLite database schema creation",
        "Data persistence for all models (gardens, tasks, inventory)",
        "Database migration and backup systems",
        "Data import/export functionality",
        "Multi-user data isolation"
      ],
      "completion_status": "20% Complete - Architecture Ready",
      "deliverables_needed": [
        "Complete SQLite schema implementation",
        "CRUD operations for all data models",
        "Database backup and recovery system",
        "CSV/JSON import/export functionality",
        "Data validation and integrity checks"
      ]
    },

    "stage_6": {
      "name": "Calculator Systems Integration",
      "description": "Professional growing calculation tools integrated into GUI",
      "requirements": [
        "Nutrient calculator with EC/PPM conversions and recipes",
        "Lighting calculator with PPFD optimization", 
        "Cost calculator with ROI analysis and projections",
        "Environmental calculator with VPD and climate optimization",
        "Integration with main GUI and data persistence"
      ],
      "completion_status": "30% Complete - Components Created",
      "deliverables_needed": [
        "Complete nutrient calculator with recipe database integration",
        "PPFD calculator with light coverage optimization",
        "Comprehensive cost analysis with setup and recurring costs",
        "VPD calculator with environmental recommendations",
        "GUI integration with tabbed calculator interface"
      ]
    },

    "stage_7": {
      "name": "Task Scheduling & Automation",
      "description": "Intelligent task generation and scheduling system",
      "requirements": [
        "Automated task generation based on growth stages",
        "Calendar integration with visual task display",
        "Recurring task management with customization",
        "Task dependencies and workflow management", 
        "Notification system for due and overdue tasks"
      ],
      "completion_status": "15% Complete - Framework Created",
      "deliverables_needed": [
        "Growth stage-based automatic task creation",
        "Calendar view with drag-and-drop task management",
        "Recurring task patterns with customizable schedules",
        "Task dependency mapping and workflow enforcement",
        "Desktop notification system for reminders"
      ]
    },

    "stage_8": {
      "name": "Advanced Features & Multi-Garden Management",
      "description": "Professional features for managing multiple growing operations",
      "requirements": [
        "Multi-garden dashboard with cross-garden analytics",
        "Resource optimization across multiple gardens",
        "Pest and disease management with IPM integration",
        "Photo documentation system with growth tracking",
        "Advanced reporting with charts and trend analysis"
      ],
      "completion_status": "5% Complete - Knowledge Base Ready",
      "deliverables_needed": [
        "Multi-garden comparison dashboard",
        "Resource allocation and optimization algorithms", 
        "IPM system with treatment schedules and pest identification",
        "Photo documentation with timeline and analysis",
        "Professional report generation (PDF/Excel)"
      ]
    },

    "stage_9": {
      "name": "Integration & External APIs",
      "description": "External service integration and mobile companion features",
      "requirements": [
        "Weather API integration for outdoor growing",
        "Equipment control interfaces (sensors, lights, automation)",
        "Mobile app companion planning and basic functionality", 
        "Cloud sync capabilities for data backup",
        "Third-party service integrations"
      ],
      "completion_status": "0% Complete",
      "deliverables_needed": [
        "Weather service integration with local forecasts",
        "IoT device control interfaces",
        "Mobile companion app architecture",
        "Cloud storage and synchronization",
        "API framework for third-party extensions"
      ]
    },

    "stage_10": {
      "name": "Production Deployment & User Experience",
      "description": "Final polish, optimization, and deployment preparation",
      "requirements": [
        "Performance optimization and resource management",
        "User experience polish and accessibility features",
        "Installation and deployment systems",
        "User documentation and help system",
        "Production testing and quality assurance"
      ],
      "completion_status": "0% Complete",
      "deliverables_needed": [
        "Application performance optimization",
        "Professional installer creation",
        "Comprehensive user manual and help system",
        "Accessibility compliance and testing",
        "Production deployment and distribution"
      ]
    }
  },

  },

  "current_development_status": {
    "overall_completion": "25% Complete (4 stages of 10)",
    "stages_completed": ["Stage 1", "Stage 2", "Stage 3", "Stage 4"],
    "current_stage": "Stage 5 - Database Integration",
    "lines_of_code": "3500+",
    "files_created": 25,
    
    "completed_deliverables": {
      "foundation": [
        "Professional project structure with MVC architecture",
        "Settings management with JSON persistence",
        "Comprehensive logging system with file and console output",
        "Theme system converted from CustomTkinter to standard Tkinter",
        "Requirements management with standard libraries only"
      ],
      "data_models": [
        "Garden model with environmental tracking and metrics",
        "Task model with priorities, dependencies, and scheduling",
        "Plant model with growth stages and performance tracking",
        "Growing knowledge database with 465+ lines of information",
        "Product database with 350+ lines of equipment and pricing"
      ],
      "gui_system": [
        "Main window with professional tabbed interface (300+ lines)",
        "Dashboard with real-time statistics and activity feeds",
        "Task manager with priority-based task display",
        "Garden management with card-based visual layout",
        "Calculator launcher interface with modern styling",
        "Settings panel with theme and preference configuration"
      ],
      "testing": [
        "Comprehensive GUI test suite (440+ lines)",
        "Automated test runner with detailed result reporting",
        "Sample data generation for realistic testing scenarios",
        "Headless environment detection and compatibility",
        "Multi-component testing framework"
      ]
      "testing": [
        "Comprehensive GUI test suite (440+ lines)",
        "Automated test runner with detailed result reporting",
        "Sample data generation for realistic testing scenarios",
        "Headless environment detection and compatibility",
        "Multi-component testing framework"
      ]
    },

    "testing_framework": {
      "overview": "Comprehensive testing suite with GUI and unit tests",
      "test_files": {
        "gui_test.py": {
          "path": "/workspaces/skills-copilot-codespaces-vscode/GrowMaster/gui_test.py",
          "description": "Comprehensive GUI testing suite (596 lines)",
          "execution_stage": "Stage 4 - Testing Infrastructure",
          "test_types": [
            "GUI Component Tests",
            "Window Creation Tests", 
            "Tabbed Interface Tests",
            "Dashboard Tests",
            "Task Management Tests",
            "Garden Management Tests",
            "Inventory Tests",
            "Dialog and Form Tests",
            "Main Application Tests"
          ],
          "test_methods": {
            "test_basic_window()": "Test basic window creation and styling - Stage 4",
            "test_tabbed_interface()": "Test complete tabbed interface with all tabs - Stage 4",
            "create_test_dashboard()": "Create test dashboard with sample statistics - Stage 4",
            "create_test_tasks()": "Create test task interface with sample tasks - Stage 5",
            "create_test_gardens()": "Create test garden interface with sample gardens - Stage 5",
            "create_test_inventory()": "Create test inventory interface with sample items - Stage 6",
            "test_dialogs_and_forms()": "Test dialog boxes and forms - Stage 7",
            "test_main_application()": "Test main application window - Stage 8",
            "run_all_tests()": "Run complete test suite - Stage 10"
          },
          "dependencies": ["tkinter", "ttk", "datetime", "pathlib"],
          "execution_requirements": "Requires display environment (non-headless)"
        }
      },
      "planned_tests": {
        "unit_tests": {
          "core/models/test_garden.py": {
            "planned_path": "/workspaces/skills-copilot-codespaces-vscode/GrowMaster/tests/unit/test_garden.py",
            "execution_stage": "Stage 5 - Core Business Logic",
            "test_coverage": ["Garden model methods", "Environmental calculations", "Performance metrics"]
          },
          "core/models/test_task.py": {
            "planned_path": "/workspaces/skills-copilot-codespaces-vscode/GrowMaster/tests/unit/test_task.py", 
            "execution_stage": "Stage 5 - Core Business Logic",
            "test_coverage": ["Task scheduling", "Dependencies", "Resource management"]
          },
          "core/calculators/test_nutrient_calculator.py": {
            "planned_path": "/workspaces/skills-copilot-codespaces-vscode/GrowMaster/tests/unit/test_nutrient_calculator.py",
            "execution_stage": "Stage 6 - Calculator Systems",
            "test_coverage": ["Nutrient recipes", "EC calculations", "Deficiency corrections"]
          },
          "core/calculators/test_lighting_calculator.py": {
            "planned_path": "/workspaces/skills-copilot-codespaces-vscode/GrowMaster/tests/unit/test_lighting_calculator.py",
            "execution_stage": "Stage 6 - Calculator Systems", 
            "test_coverage": ["PPFD calculations", "DLI calculations", "Energy costs"]
          },
          "core/calculators/test_cost_calculator.py": {
            "planned_path": "/workspaces/skills-copilot-codespaces-vscode/GrowMaster/tests/unit/test_cost_calculator.py",
            "execution_stage": "Stage 6 - Calculator Systems",
            "test_coverage": ["Setup costs", "Operating costs", "ROI analysis"]
          },
          "core/calculators/test_environmental_calculator.py": {
            "planned_path": "/workspaces/skills-copilot-codespaces-vscode/GrowMaster/tests/unit/test_environmental_calculator.py",
            "execution_stage": "Stage 6 - Calculator Systems",
            "test_coverage": ["VPD calculations", "Climate control", "Air exchange"]
          }
        },
        "integration_tests": {
          "test_database_integration.py": {
            "planned_path": "/workspaces/skills-copilot-codespaces-vscode/GrowMaster/tests/integration/test_database_integration.py",
            "execution_stage": "Stage 7 - Data Integration",
            "test_coverage": ["Database operations", "Model persistence", "Data migration"]
          },
          "test_knowledge_base_integration.py": {
            "planned_path": "/workspaces/skills-copilot-codespaces-vscode/GrowMaster/tests/integration/test_knowledge_base_integration.py",
            "execution_stage": "Stage 8 - Knowledge Systems",
            "test_coverage": ["Growing guides", "Product database", "Recipe systems"]
          }
        },
        "system_tests": {
          "test_full_workflow.py": {
            "planned_path": "/workspaces/skills-copilot-codespaces-vscode/GrowMaster/tests/system/test_full_workflow.py",
            "execution_stage": "Stage 9 - System Testing",
            "test_coverage": ["End-to-end workflows", "Multi-garden operations", "Data persistence"]
          }
        }
      },
      "test_execution_stages": {
        "Stage 4": ["GUI component tests", "Basic window tests", "Theme tests"],
        "Stage 5": ["Model unit tests", "Core business logic tests"],
        "Stage 6": ["Calculator system tests", "Algorithm validation tests"],
        "Stage 7": ["Database integration tests", "Task scheduler tests"],
        "Stage 8": ["Knowledge base tests", "GUI integration tests"],
        "Stage 9": ["System integration tests", "Performance tests"],
        "Stage 10": ["User acceptance tests", "Deployment validation tests"]
      }
    },

    "project_structure": {
      "root_directory": "/workspaces/skills-copilot-codespaces-vscode",
      "project_directory": "/workspaces/skills-copilot-codespaces-vscode/GrowMaster",
      "total_files": 68,
      "file_tree": {
        "root_files": [
          "/workspaces/skills-copilot-codespaces-vscode/requirements.txt",
          "/workspaces/skills-copilot-codespaces-vscode/information.json",
          "/workspaces/skills-copilot-codespaces-vscode/README.md",
          "/workspaces/skills-copilot-codespaces-vscode/package.json"
        ],
        "growmaster_root": [
          "/workspaces/skills-copilot-codespaces-vscode/GrowMaster/main.py",
          "/workspaces/skills-copilot-codespaces-vscode/GrowMaster/gui_test.py",
          "/workspaces/skills-copilot-codespaces-vscode/GrowMaster/requirements.txt", 
          "/workspaces/skills-copilot-codespaces-vscode/GrowMaster/requirements_tk.txt",
          "/workspaces/skills-copilot-codespaces-vscode/GrowMaster/README.md",
          "/workspaces/skills-copilot-codespaces-vscode/GrowMaster/PROJECT_STATUS.md"
        ],
        "config": [
          "/workspaces/skills-copilot-codespaces-vscode/GrowMaster/config/__init__.py",
          "/workspaces/skills-copilot-codespaces-vscode/GrowMaster/config/settings.py",
          "/workspaces/skills-copilot-codespaces-vscode/GrowMaster/config/themes.py",
          "/workspaces/skills-copilot-codespaces-vscode/GrowMaster/config/themes_tk.py"
        ],
        "core": [
          "/workspaces/skills-copilot-codespaces-vscode/GrowMaster/core/__init__.py"
        ],
        "core_models": [
          "/workspaces/skills-copilot-codespaces-vscode/GrowMaster/core/models/__init__.py",
          "/workspaces/skills-copilot-codespaces-vscode/GrowMaster/core/models/garden.py",
          "/workspaces/skills-copilot-codespaces-vscode/GrowMaster/core/models/task.py"
        ],
        "core_calculators": [
          "/workspaces/skills-copilot-codespaces-vscode/GrowMaster/core/calculators/__init__.py",
          "/workspaces/skills-copilot-codespaces-vscode/GrowMaster/core/calculators/cost_calculator.py",
          "/workspaces/skills-copilot-codespaces-vscode/GrowMaster/core/calculators/environmental_calculator.py",
          "/workspaces/skills-copilot-codespaces-vscode/GrowMaster/core/calculators/lighting_calculator.py",
          "/workspaces/skills-copilot-codespaces-vscode/GrowMaster/core/calculators/nutrient_calculator.py"
        ],
        "core_database": [
          "/workspaces/skills-copilot-codespaces-vscode/GrowMaster/core/database/database_manager.py"
        ],
        "core_schedulers": [
          "/workspaces/skills-copilot-codespaces-vscode/GrowMaster/core/schedulers/__init__.py",
          "/workspaces/skills-copilot-codespaces-vscode/GrowMaster/core/schedulers/task_scheduler.py"
        ],
        "gui": [
          "/workspaces/skills-copilot-codespaces-vscode/GrowMaster/gui/__init__.py",
          "/workspaces/skills-copilot-codespaces-vscode/GrowMaster/gui/main_window.py",
          "/workspaces/skills-copilot-codespaces-vscode/GrowMaster/gui/main_window_tk.py"
        ],
        "gui_components": [
          "/workspaces/skills-copilot-codespaces-vscode/GrowMaster/gui/components/__init__.py",
          "/workspaces/skills-copilot-codespaces-vscode/GrowMaster/gui/components/cost_calculator_tab.py",
          "/workspaces/skills-copilot-codespaces-vscode/GrowMaster/gui/components/dashboard_tab.py",
          "/workspaces/skills-copilot-codespaces-vscode/GrowMaster/gui/components/grow_plans_tab.py",
          "/workspaces/skills-copilot-codespaces-vscode/GrowMaster/gui/components/inventory_tab.py",
          "/workspaces/skills-copilot-codespaces-vscode/GrowMaster/gui/components/master_calendar_tab.py",
          "/workspaces/skills-copilot-codespaces-vscode/GrowMaster/gui/components/notes_tab.py",
          "/workspaces/skills-copilot-codespaces-vscode/GrowMaster/gui/components/settings_tab.py",
          "/workspaces/skills-copilot-codespaces-vscode/GrowMaster/gui/components/task_manager_tab.py"
        ],
        "gui_dialogs": [
          "/workspaces/skills-copilot-codespaces-vscode/GrowMaster/gui/dialogs/__init__.py",
          "/workspaces/skills-copilot-codespaces-vscode/GrowMaster/gui/dialogs/new_grow_wizard.py"
        ],
        "data_knowledge_base": [
          "/workspaces/skills-copilot-codespaces-vscode/GrowMaster/data/knowledge_base/growing_guides.py",
          "/workspaces/skills-copilot-codespaces-vscode/GrowMaster/data/knowledge_base/products.py"
        ],
        "tests": [
          "/workspaces/skills-copilot-codespaces-vscode/GrowMaster/tests/"
        ]
      }
    },

    "dependencies": {
      "production_requirements": {
        "source_file": "/workspaces/skills-copilot-codespaces-vscode/GrowMaster/requirements_tk.txt",
        "python_version": ">=3.9",
        "core_dependencies": {
          "tkinter": {
            "version": "Built-in",
            "purpose": "GUI framework - standard library",
            "stage": "Stage 4 - GUI Foundation"
          },
          "Pillow": {
            "version": ">=9.0.0", 
            "purpose": "Image processing for plant photos and icons",
            "stage": "Stage 6 - Media Management"
          },
          "pandas": {
            "version": ">=1.5.0",
            "purpose": "Data analysis and manipulation for grow data",
            "stage": "Stage 5 - Data Management"
          },
          "numpy": {
            "version": ">=1.21.0",
            "purpose": "Scientific calculations for environmental and nutrient calculations",
            "stage": "Stage 6 - Calculator Systems"
          },
          "matplotlib": {
            "version": ">=3.5.0",
            "purpose": "Data visualization and charting",
            "stage": "Stage 8 - Reporting and Analytics"
          },
          "sqlite3": {
            "version": "Built-in",
            "purpose": "Local database for application data",
            "stage": "Stage 5 - Data Persistence"
          },
          "datetime": {
            "version": "Built-in", 
            "purpose": "Date and time handling for scheduling",
            "stage": "Stage 5 - Core Logic"
          },
          "json": {
            "version": "Built-in",
            "purpose": "Configuration and data serialization",
            "stage": "Stage 4 - Configuration"
          },
          "pathlib": {
            "version": "Built-in",
            "purpose": "File system path management",
            "stage": "Stage 4 - File Management"
          },
          "logging": {
            "version": "Built-in",
            "purpose": "Application logging and debugging",
            "stage": "Stage 4 - Error Handling"
          }
        },
        "optional_dependencies": {
          "tkcalendar": {
            "version": ">=1.6.0",
            "purpose": "Enhanced calendar widgets",
            "stage": "Stage 7 - Advanced GUI"
          },
          "plotly": {
            "version": ">=5.0.0",
            "purpose": "Interactive data visualization",
            "stage": "Stage 9 - Advanced Analytics"
          },
          "openpyxl": {
            "version": ">=3.0.0",
            "purpose": "Excel export functionality",
            "stage": "Stage 8 - Data Export"
          },
          "requests": {
            "version": ">=2.25.0",
            "purpose": "Online data updates and API integration",
            "stage": "Stage 9 - External Integration"
          },
          "scipy": {
            "version": ">=1.7.0",
            "purpose": "Advanced scientific calculations",
            "stage": "Stage 6 - Advanced Calculations"
          }
        }
      },
      "development_requirements": {
        "testing": {
          "pytest": ">=6.0.0",
          "pytest-cov": ">=2.10.0",
          "pytest-mock": ">=3.6.0"
        },
        "code_quality": {
          "flake8": ">=4.0.0",
          "black": ">=21.0.0",
          "mypy": ">=0.910"
        },
        "documentation": {
          "sphinx": ">=4.0.0",
          "sphinx-rtd-theme": ">=1.0.0"
        }
      }
    },

    "technical_requirements": {
      "system_requirements": {
        "operating_systems": ["Windows 10+", "Ubuntu 20.04+", "macOS 11+"],
        "python_version": "3.9 - 3.12",
        "memory": "Minimum 512MB RAM, Recommended 2GB+",
        "storage": "Minimum 100MB free space for installation",
        "display": "GUI requires desktop environment (non-headless)",
        "network": "Optional - for online features and updates"
      },
      "development_environment": {
        "ide": "VS Code with Python extension recommended",
        "version_control": "Git 2.25+",
        "package_manager": "pip 21.0+",
        "virtual_environment": "venv or conda recommended",
        "database_tools": "SQLite 3.31+ (built-in with Python)",
        "testing_environment": "Desktop environment required for GUI tests"
      },
      "deployment_requirements": {
        "packaging": "PyInstaller for standalone executables",
        "installer": "NSIS for Windows installer creation", 
        "code_signing": "Optional - for distribution trust",
        "documentation": "Sphinx for comprehensive documentation",
        "ci_cd": "GitHub Actions for automated testing"
      },
      "performance_requirements": {
        "startup_time": "< 5 seconds on modern hardware",
        "memory_usage": "< 200MB during normal operation",
        "database_size": "< 100MB for typical multi-garden setup",
        "response_time": "< 1 second for UI interactions",
        "calculation_time": "< 2 seconds for complex calculations"
      },
      "security_requirements": {
        "data_encryption": "SQLite database encryption for sensitive data",
        "file_permissions": "Restricted access to configuration files",
        "input_validation": "All user inputs validated and sanitized",
        "error_handling": "Comprehensive error handling prevents crashes",
        "backup_integrity": "Automated backup verification"
      },
      "compatibility_requirements": {
        "python_compatibility": "Forward compatible with Python 3.9-3.12",
        "gui_compatibility": "Standard Tkinter for maximum compatibility",
        "database_compatibility": "SQLite for cross-platform data portability",
        "file_format_compatibility": "JSON/CSV for data interchange",
        "upgrade_compatibility": "Automatic data migration between versions"
      }
    },

    "immediate_next_steps": {
      "stage_5_priorities": [
        "Complete SQLite database schema implementation",
        "Implement CRUD operations for all data models",
        "Create data persistence for gardens, tasks, and inventory",
        "Build database backup and recovery system",
        "Add data import/export functionality"
      ],
      "stage_6_priorities": [
        "Integrate calculator components with main GUI",
        "Complete nutrient calculator with recipe database",
        "Implement lighting calculator with PPFD optimization",
        "Build cost calculator with ROI analysis",
        "Add environmental calculator with VPD calculations"
      ]
    },

    "technical_debt": "Minimal - Clean architecture with professional standards",
    "known_issues": [
      "GUI testing requires non-headless environment",
      "Database layer needs completion for data persistence",
      "Calculator systems need GUI integration",
      "Task scheduling needs implementation"
    ]
  },
    "multi_garden_management": {
      "description": "Support for unlimited gardens with individual tracking",
      "components": [
        "Garden creation and configuration wizard",
        "Per-garden calendars and scheduling",
        "Garden comparison dashboard",
        "Individual cost tracking",
        "Cross-garden resource optimization"
      ],
      "priority": "Critical",
      "complexity": "High"
    },

    "intelligent_task_management": {
      "description": "Automated task generation and scheduling system",
      "components": [
        "Growth stage-based task automation",
        "Multi-garden task coordination",
        "Weather-aware scheduling",
        "Priority and dependency management",
        "Mobile notifications and reminders"
      ],
      "priority": "Critical",
      "complexity": "High"
    },

    "grow_dashboard": {
      "description": "Central overview of all active grows with status tracking",
      "components": [
        "Real-time status overview of all active grows",
        "Next task alerts and priority indicators",
        "Quick links to individual garden calendars",
        "Critical alerts and warnings display",
        "Performance metrics at-a-glance"
      ],
      "priority": "Critical",
      "complexity": "Medium"
    },

    "master_calendar_system": {
      "description": "Unified calendar view with advanced filtering capabilities",
      "components": [
        "All-garden task aggregation view",
        "Advanced filtering by garden, task type, urgency",
        "Color-coded task visualization by garden/setup",
        "Multi-view support (daily, weekly, monthly)",
        "Drag-and-drop task rescheduling"
      ],
      "priority": "Critical",
      "complexity": "High"
    },

    "grow_templates_and_cloning": {
      "description": "Template system for rapid grow plan creation and replication",
      "components": [
        "Save successful grows as reusable templates",
        "Template library with categorization",
        "One-click grow plan cloning",
        "Template sharing and import/export",
        "Template modification and versioning"
      ],
      "priority": "High",
      "complexity": "Medium"
    },

    "task_linking_and_dependencies": {
      "description": "Advanced task relationship management across gardens",
      "components": [
        "Cross-garden task dependencies (clone from A, transplant to C)",
        "Automatic scheduling of dependent tasks",
        "Visual dependency mapping",
        "Dependency conflict detection and resolution",
        "Automated reminders for dependent tasks"
      ],
      "priority": "High",
      "complexity": "High"
    },

    "resource_inventory_management": {
      "description": "Comprehensive inventory tracking and resource optimization",
      "components": [
        "Real-time inventory tracking for nutrients, media, equipment",
        "Low stock alerts and notifications",
        "Automated shopping list generation",
        "Vendor integration and price comparison",
        "Usage analytics and waste reduction optimization"
      ],
      "priority": "High",
      "complexity": "Medium"
    },

    "cost_efficiency_analytics": {
      "description": "Advanced analytics for cost optimization and efficiency tracking",
      "components": [
        "Visual cost breakdown graphs and charts",
        "Electricity usage monitoring and optimization",
        "Yield per dollar/watt efficiency calculations",
        "Comparative analysis across grows and methods",
        "ROI tracking and profitability analysis"
      ],
      "priority": "High",
      "complexity": "Medium"
    },

    "data_management_and_backup": {
      "description": "Comprehensive data handling and backup systems",
      "components": [
        "Export to CSV/JSON for external analysis",
        "Import previous grows and template data",
        "Automated backup scheduling",
        "Data recovery and restoration tools",
        "Data integrity verification"
      ],
      "priority": "Medium",
      "complexity": "Medium"
    },

    "mobile_companion_integration": {
      "description": "Mobile access and synchronization capabilities",
      "components": [
        "Mobile-friendly web interface or companion app",
        "Real-time data synchronization between devices",
        "Mobile notifications and task reminders",
        "Offline mode with sync when connected",
        "Quick task completion from mobile devices"
      ],
      "priority": "Medium",
      "complexity": "High"
    },

    "photo_and_documentation": {
      "description": "Visual tracking and comprehensive documentation system",
      "components": [
        "Photo attachments to tasks and events",
        "Progress photo galleries with timestamps",
        "Rich text notes with formatting support",
        "Visual documentation templates",
        "Photo-based problem diagnosis assistance"
      ],
      "priority": "Medium",
      "complexity": "Medium"
    },

    "user_customization": {
      "description": "Extensive customization options for user preferences",
      "components": [
        "Custom task types and categories",
        "Personalized reminder and notification settings",
        "Adjustable calendar views and layouts",
        "Custom color schemes and themes",
        "User-defined calculation formulas and metrics"
      ],
      "priority": "Medium",
      "complexity": "Medium"
    },

    "security_and_privacy": {
      "description": "Data protection and privacy features",
      "components": [
        "Optional password protection for application access",
        "Data encryption for sensitive information",
        "User permission levels and access control",
        "Private mode for sensitive operations",
        "Secure data export and sharing options"
      ],
      "priority": "Medium",
      "complexity": "Medium"
    },

    "comprehensive_growing_methods": {
      "description": "Support for all major growing methodologies",
      "components": [
        "Indoor growing (tents, rooms, controlled environments)",
        "Outdoor growing (seasonal, weather integration)",
        "Hydroponic systems (DWC, NFT, Ebb & Flow, Aeroponics)",
        "Soil growing (organic, synthetic, living soil)",
        "Greenhouse growing (climate control, season extension)",
        "Mixed light (light deprivation, supplemental lighting)"
      ],
      "priority": "Critical",
      "complexity": "Medium"
    },

    "product_inventory_management": {
      "description": "Comprehensive product and supply management system",
      "components": [
        "Product database from educational sources",
        "Real-time inventory tracking",
        "Low-stock alerts and reorder points",
        "Product application scheduling",
        "Cost tracking and vendor management",
        "Shopping list generation"
      ],
      "priority": "High",
      "complexity": "Medium"
    },

    "pest_disease_management": {
      "description": "Integrated Pest Management (IPM) system",
      "components": [
        "IPM protocols and scheduling",
        "Early detection and prevention",
        "Organic and synthetic treatment options",
        "Application timing and weather considerations",
        "Treatment effectiveness tracking",
        "Beneficial insect management"
      ],
      "priority": "High",
      "complexity": "High"
    },

    "cost_analysis_profitability": {
      "description": "Detailed financial tracking and analysis",
      "components": [
        "Per-garden and per-crop cost breakdown",
        "ROI calculations and projections",
        "Equipment depreciation tracking",
        "Utility cost optimization",
        "Harvest yield vs. cost analysis",
        "Profitability comparisons"
      ],
      "priority": "High",
      "complexity": "Medium"
    },

    "knowledge_base_integration": {
      "description": "Educational content and expert guidance system",
      "components": [
        "Content from 'The Marijuana Bible' and university sources",
        "Scientific method integration",
        "Problem diagnosis with symptom matching",
        "Best practices recommendations",
        "Seasonal growing guides",
        "Research-backed optimization"
      ],
      "priority": "Medium",
      "complexity": "Medium"
    },

    "advanced_analytics": {
      "description": "Performance tracking and optimization system",
      "components": [
        "Growth performance analytics",
        "Environmental data logging",
        "Yield prediction models",
        "Resource efficiency optimization",
        "Historical data comparison",
        "Trend analysis and reporting"
      ],
      "priority": "Medium",
      "complexity": "High"
    }
  },

  "file_structure": {
    "root_directory": "GrowMaster/",
    "structure": {
      "main.py": "Application entry point and initialization",
      "config/": {
        "settings.py": "Application configuration and user preferences",
        "themes.py": "GUI themes and styling definitions",
        "constants.py": "Application constants and enums"
      },
      "gui/": {
        "main_window.py": "Main application window and tab management",
        "components/": {
          "dashboard_tab.py": "Multi-garden overview dashboard",
          "gardens_tab.py": "Garden management and configuration",
          "calendar_tab.py": "Unified and per-garden calendar views",
          "tasks_tab.py": "Task management and scheduling",
          "inventory_tab.py": "Product and inventory management",
          "pest_control_tab.py": "IPM and pest management",
          "cost_analysis_tab.py": "Financial tracking and analysis",
          "analytics_tab.py": "Performance analytics and reporting",
          "knowledge_tab.py": "Educational content and guides",
          "settings_tab.py": "Application preferences and configuration"
        },
        "dialogs/": {
          "garden_wizard.py": "New garden setup wizard",
          "task_editor.py": "Task creation and editing",
          "product_manager.py": "Product and inventory dialogs",
          "pest_treatment.py": "Pest treatment planning",
          "cost_calculator.py": "Cost calculation tools",
          "export_import.py": "Data export/import utilities"
        },
        "widgets/": {
          "multi_calendar.py": "Advanced multi-garden calendar",
          "garden_overview.py": "Individual garden status widgets",
          "task_list.py": "Advanced task list with filtering",
          "inventory_tracker.py": "Inventory status and alerts",
          "cost_charts.py": "Financial visualization widgets",
          "analytics_charts.py": "Performance visualization"
        }
      },
      "core/": {
        "models/": {
          "garden.py": "Garden data model and operations",
          "task.py": "Task management and scheduling",
          "product.py": "Product and inventory models",
          "pest_management.py": "IPM and treatment tracking",
          "cost_analysis.py": "Financial calculation models",
          "plant_profile.py": "Plant-specific data and requirements"
        },
        "database/": {
          "db_manager.py": "Database operations and connections",
          "schema.py": "Database schema definitions",
          "migrations.py": "Database version management",
          "backup_manager.py": "Data backup and restore"
        },
        "calculators/": {
          "nutrient_calculator.py": "Nutrient mixing and scheduling",
          "lighting_calculator.py": "Light planning and optimization",
          "cost_calculator.py": "Comprehensive cost analysis",
          "yield_predictor.py": "Harvest prediction models",
          "ipm_calculator.py": "IPM scheduling and effectiveness"
        },
        "schedulers/": {
          "task_scheduler.py": "Intelligent task generation",
          "multi_garden_coordinator.py": "Cross-garden task optimization",
          "weather_scheduler.py": "Weather-aware scheduling",
          "reminder_system.py": "Notification and alert management"
        }
      },
      "data/": {
        "knowledge_base/": {
          "growing_guides.py": "Comprehensive growing methodologies",
          "plant_database.py": "Plant-specific requirements and data",
          "product_database.py": "Educational product information",
          "pest_database.py": "IPM protocols and treatment options",
          "method_database.py": "Growing method specifications"
        },
        "templates/": {
          "garden_templates.py": "Pre-configured garden setups",
          "task_templates.py": "Common task sequences",
          "ipm_templates.py": "IPM protocol templates"
        },
        "resources/": {
          "icons/": "Application icons and images",
          "documentation/": "Help files and user guides",
          "sample_data/": "Example data for testing"
        }
      },
      "utils/": {
        "file_manager.py": "File operations and data persistence",
        "weather_api.py": "Weather data integration",
        "notification_manager.py": "Cross-platform notifications",
        "validators.py": "Input validation and sanitization",
        "helpers.py": "General utility functions",
        "logging_config.py": "Application logging setup"
      },
      "tests/": {
        "unit/": "Unit tests for individual components",
        "integration/": "Integration tests for system functionality",
        "gui/": "GUI testing and automation",
        "performance/": "Performance and stress testing"
      }
    }
  },

  "technical_requirements": {
    "python_version": "3.9+",
    "operating_system": "Windows 10/11",
    "dependencies": [
      "customtkinter>=5.2.0",
      "pandas>=1.5.3",
      "numpy>=1.24.3",
      "matplotlib>=3.7.1",
      "plotly>=5.14.1",
      "Pillow>=9.5.0",
      "requests>=2.31.0",
      "python-dateutil>=2.8.2",
      "win10toast>=0.9",
      "schedule>=1.2.0"
    ],
    "performance_targets": {
      "startup_time": "<5 seconds",
      "task_generation": "<2 seconds for 100 tasks",
      "database_queries": "<500ms for complex queries",
      "ui_responsiveness": "<100ms for user interactions"
    },
    "storage_requirements": {
      "base_installation": "50MB",
      "user_data": "10MB per garden per year",
      "knowledge_base": "25MB",
      "total_estimated": "100MB for typical installation"
    }
  },

  "integration_sources": {
    "educational_materials": [
      "The Marijuana Bible (Ed Rosenthal)",
      "Cannabis Encyclopedia (Jorge Cervantes)",
      "University Extension Services (UC Davis, Colorado State)",
      "USDA Agricultural Research Service publications",
      "Integrated Pest Management guidelines",
      "Hydroponic Society research papers"
    ],
    "product_information": [
      "Manufacturer nutrient guidelines",
      "Equipment specifications and usage",
      "Industry standard application rates",
      "Scientific research on effectiveness",
      "Safety data sheets and application methods"
    ],
    "weather_integration": [
      "Weather API for outdoor growing",
      "Growing degree day calculations",
      "Pest pressure predictions",
      "Optimal application timing"
    ]
  },

  "quality_assurance": {
    "testing_phases": {
      "unit_testing": "Individual component functionality",
      "integration_testing": "System component interactions",
      "gui_testing": "User interface functionality and usability",
      "performance_testing": "Speed and resource usage optimization",
      "user_acceptance_testing": "Real-world usage scenarios"
    },
    "code_quality": {
      "documentation": "Comprehensive inline and API documentation",
      "code_coverage": "Minimum 80% test coverage",
      "style_guide": "PEP 8 compliance with automated checking",
      "error_handling": "Robust error handling and user feedback"
    }
  }
}
